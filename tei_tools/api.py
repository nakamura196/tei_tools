# AUTOGENERATED! DO NOT EDIT! File to edit: ../api.ipynb.

# %% auto 0
__all__ = ['TeiTools']

# %% ../api.ipynb 3
from bs4 import BeautifulSoup

class TeiTools:
    def __init__(self):
        '''
        This is the main class for the tei-tools package.'''
        pass

    @staticmethod
    def analyze(path, freq={}):
        '''
        指定したファイルに含まれる要素および属性を抽出する
        
        Parameters:  
        * path: str  -  Path to the TEI/XML file  
        * freq: dict  -  A dictionary to store the results
        '''

        soup = BeautifulSoup(open(path,'r'), "xml")
            
        children = soup.find("TEI").findChildren(recursive=False)

        # freq = {}

        for child in children:
            p = child.name

            if p not in freq:
                freq[p] = {}

            elements = child.findChildren(recursive=True)
            # print(len(elements))

            m = freq[p]

            for element in elements:
                name = element.name
                if name not in m:
                    m[name] = {}

                attrs = element.attrs
                if len(attrs) == 0:
                    field = "none"
                    if field not in m[name]:
                        m[name][field] = 0
                    m[name][field] += 1
                for attr in attrs:
                    field = attr
                    if field not in m[name]:
                        m[name][field] = 0
                    m[name][field] += 1
        
        return freq

    @staticmethod
    def visualize(data):
        '''
        指定したデータを可視化する
        
        Parameters:  
        * data: dict  -  Data to visualize
        '''

        '''

        # a = range(0, 7)
        # b = [55,21,61,98,85,52,99]

        freq = {}
        for group in data:
            # count = 0
            # pprint(data[key])
            for element in data[group]:
                for attr in data[group][element]:
                    if element not in freq:
                        freq[element] = 0
                    freq[element] += data[group][element][attr]

        # 値の多い順にソート
        freq = {k: v for k, v in sorted(freq.items(), key=lambda item: item[1])}

        a = []
        b = []
        for key in freq:
            a.append(key)
            b.append(freq[key])
        plt.barh(a, b)
        plt.show()

        '''

        pass

    @staticmethod
    def analyzeDir(path):
        '''
        指定したパスに含まれるXMLファイルに含まれる要素および属性を抽出する
        
        Parameters:  
        * path: str  -  Path to the TEI/XML file e.g. "data/*.xml"
        '''

        freq = {}

        files = glob.glob(path, recursive=True)

        for file in files:
            freq = TeiTools.analyze(file, freq=freq)

        return freq

    @staticmethod
    def addWordElement(path, target="TEI"):
        '''
        指定したファイルに含まれるwordにタグを付与する
        
        Parameters:  
        * path: str  -  Path to the TEI/XML file  
        * target: str  -  Target element name to add word element

        Returns:  
        * str  -  The modified XML file
        '''

        soup = BeautifulSoup(open(path,'r'), "xml")

        elements = soup.find(target).findChildren(text=True, recursive=True)

        for element in elements:
            text = element.string.strip()
            if text == "":
                continue

            seg = soup.new_tag("seg")

            for i in range(len(text)):
                w = text[i:i+1]

                w = soup.new_tag("w")
                w.string = text[i:i+1]

                seg.append(w)

            element.replace_with(seg)

        return soup

    @staticmethod
    def save(path, soup):
        '''
        指定したパスにBeautifulSoupオブジェクトを保存する
        
        Parameters:  
        * path: str  -  Path to the TEI/XML file
        * soup: BeautifulSoup  -  The modified XML file
        '''

        f = open(path, 'w')
        f.write(soup.prettify())
        f.close()
